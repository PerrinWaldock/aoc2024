Program: 
2,4,	A%8 -> B
1,1,	B^001 -> B
7,5,	A >> B -> C
1,5,	B^011 -> B
0,3,	A >> 3 -> A
4,3,	B ^ C -> B
5,5,	B % 8 -> output
3,0 	if A != 0, return to start


B = (A%8)^001
C = A >> B
B = B ^ 011
A = A >> 3
B = B ^ C

simplified:
output = (((A%8)^001)^011) ^ (A >> ((A%8)^001)))
then, get the next 3 bits out of A

needed output: 2,4,1,1,7,5,1,5,0,3,4,3,5,5,3,0
A must be ~16*3 bits long

(X^0)^0: X=0 -> 0, X=1 -> 1: X
(X^0)^1: X=0 -> 1, X=1 -> 0: ~X
(X^1)^0: X=0 -> 1, X=1 -> 0: ~X
(X^1)^1: X=0 -> 0, X=1 -> 1: X

so ^001^011 bitwise is (same)(flipped)(same)


lookup for left side:
000 -> 010 = 2
001 -> 011 = 3
010 -> 000 = 0
011 -> 001 = 1
100 -> 110 = 6
101 -> 111 = 7
110 -> 100 = 4
111 -> 101 = 5

shift for a given value of A:
000 -> 001 = 1
001 -> 000 = 0
010 -> 011 = 3
011 -> 010 = 2
100 -> 101 = 5
101 -> 100 = 4
110 -> 111 = 7
111 -> 110 = 6

last number: know that digits above A must be 0 because algorithm terminates. Thus, A is only 3 digits long. What 3 digit number produces output?
second-last number: know upper three digits. What lower three digits give output?
repeat to get all numbers


